const mysql = require('mysql2/promise');

// Database configuration
const dbConfig = {
    host: 'localhost',
    user: 'root',
    password: 'kpi123',
    database: 'users_db'
};

async function createTasksTable() {
    let connection;
    
    try {
        console.log('üîó Connecting to database...');
        connection = await mysql.createConnection(dbConfig);
        
        console.log('üóëÔ∏è Dropping existing related tables if exists...');
        await connection.execute('SET FOREIGN_KEY_CHECKS = 0');
        await connection.execute('DROP TABLE IF EXISTS task_approvals');
        await connection.execute('DROP TABLE IF EXISTS tasks');
        await connection.execute('SET FOREIGN_KEY_CHECKS = 1');
        
        console.log('üìù Creating tasks table...');
        
        const createTableQuery = `
            CREATE TABLE tasks (
                id INT AUTO_INCREMENT PRIMARY KEY,
                code VARCHAR(50) UNIQUE NOT NULL,
                title VARCHAR(500) NOT NULL,
                monthly_work TEXT,
                personal_work TEXT,
                level ENUM('task', 'monthly', 'personal') NOT NULL DEFAULT 'task',
                parent_code VARCHAR(50),
                team_code VARCHAR(10) NOT NULL,
                type_code VARCHAR(20) NOT NULL,
                nature VARCHAR(100),
                product VARCHAR(200),
                objective TEXT,
                dod TEXT,
                assignee VARCHAR(100) NOT NULL,
                progress INT DEFAULT 0,
                status VARCHAR(50) DEFAULT 'not-started',
                priority VARCHAR(20) DEFAULT 'medium',
                start_date DATE,
                end_date DATE,
                actual_start_date DATE,
                actual_end_date DATE,
                notes TEXT,
                created_by VARCHAR(100) NOT NULL,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
                
                INDEX idx_code (code),
                INDEX idx_team_code (team_code),
                INDEX idx_assignee (assignee),
                INDEX idx_status (status),
                INDEX idx_level (level),
                INDEX idx_parent_code (parent_code),
                INDEX idx_created_by (created_by),
                
                FOREIGN KEY (parent_code) REFERENCES tasks(code) ON DELETE SET NULL
            ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci
        `;
        
        await connection.execute(createTableQuery);
        console.log('‚úÖ Tasks table created successfully!');
        
        // Create task_categories table
        console.log('üìù Creating task_categories table...');
        
        const createCategoriesQuery = `
            CREATE TABLE IF NOT EXISTS task_categories (
                id INT AUTO_INCREMENT PRIMARY KEY,
                category_name VARCHAR(100) NOT NULL,
                category_code VARCHAR(20) UNIQUE NOT NULL,
                description TEXT,
                color VARCHAR(7) DEFAULT '#007bff',
                is_active BOOLEAN DEFAULT TRUE,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
                
                INDEX idx_category_code (category_code),
                INDEX idx_is_active (is_active)
            ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci
        `;
        
        await connection.execute(createCategoriesQuery);
        console.log('‚úÖ Task categories table created successfully!');
        
        // Insert default categories
        console.log('üìù Adding default task categories...');
        
        const defaultCategories = [
            ['Ph√°t tri·ªÉn h·ªá th·ªëng', 'development', 'Ph√°t tri·ªÉn v√† c·∫£i ti·∫øn h·ªá th·ªëng', '#007bff'],
            ['B·∫£o tr√¨ v·∫≠n h√†nh', 'maintenance', 'B·∫£o tr√¨ v√† v·∫≠n h√†nh h·ªá th·ªëng', '#28a745'],
            ['Nghi√™n c·ª©u', 'research', 'Nghi√™n c·ª©u c√¥ng ngh·ªá m·ªõi', '#6f42c1'],
            ['ƒê√†o t·∫°o', 'training', 'ƒê√†o t·∫°o v√† ph√°t tri·ªÉn nh√¢n s·ª±', '#20c997'],
            ['H·ªó tr·ª£ kh√°ch h√†ng', 'support', 'H·ªó tr·ª£ v√† t∆∞ v·∫•n kh√°ch h√†ng', '#fd7e14'],
            ['Qu·∫£n l√Ω d·ª± √°n', 'project-management', 'Qu·∫£n l√Ω v√† ƒëi·ªÅu ph·ªëi d·ª± √°n', '#e83e8c']
        ];
        
        for (const [name, code, desc, color] of defaultCategories) {
            await connection.execute(
                'INSERT INTO task_categories (category_name, category_code, description, color) VALUES (?, ?, ?, ?)',
                [name, code, desc, color]
            );
            console.log(`‚úÖ Added category: ${name}`);
        }
        
        console.log('üéâ Database setup completed successfully!');
        
    } catch (error) {
        console.error('‚ùå Error creating tasks table:', error);
    } finally {
        if (connection) {
            await connection.end();
            console.log('üîå Database connection closed');
        }
    }
}

// Run the script
createTasksTable();

# KPI TT Cloud - Team Management Script
# S·ª≠ d·ª•ng: .\manage-teams.ps1 [backup|validate|restore|list]

param(
    [Parameter(Mandatory=$true)]
    [ValidateSet("backup", "validate", "restore", "list", "help")]
    [string]$Action,
    
    [string]$BackupFile = ""
)

$ConfigPath = "api\config\teams.json"
$BackupDir = "api\config\backups"

# T·∫°o th∆∞ m·ª•c backup n·∫øu ch∆∞a c√≥
if (!(Test-Path $BackupDir)) {
    New-Item -ItemType Directory -Path $BackupDir -Force | Out-Null
}

function Show-Help {
    Write-Host "üè¢ KPI TT Cloud - Team Management Script" -ForegroundColor Cyan
    Write-Host ""
    Write-Host "C√°ch s·ª≠ d·ª•ng:" -ForegroundColor Yellow
    Write-Host "  .\manage-teams.ps1 backup          # T·∫°o backup file teams.json"
    Write-Host "  .\manage-teams.ps1 validate        # Ki·ªÉm tra syntax JSON"
    Write-Host "  .\manage-teams.ps1 restore [file]  # Restore t·ª´ backup"
    Write-Host "  .\manage-teams.ps1 list            # Li·ªát k√™ t·∫•t c·∫£ teams"
    Write-Host "  .\manage-teams.ps1 help            # Hi·ªÉn th·ªã h∆∞·ªõng d·∫´n"
    Write-Host ""
    Write-Host "V√≠ d·ª•:" -ForegroundColor Green
    Write-Host "  .\manage-teams.ps1 backup"
    Write-Host "  .\manage-teams.ps1 restore teams_backup_20241217_143022.json"
}

function Backup-Teams {
    if (!(Test-Path $ConfigPath)) {
        Write-Host "‚ùå Kh√¥ng t√¨m th·∫•y file $ConfigPath" -ForegroundColor Red
        return
    }
    
    $timestamp = Get-Date -Format "yyyyMMdd_HHmmss"
    $backupFile = "$BackupDir\teams_backup_$timestamp.json"
    
    try {
        Copy-Item $ConfigPath $backupFile
        Write-Host "‚úÖ Backup th√†nh c√¥ng: $backupFile" -ForegroundColor Green
        
        # Hi·ªÉn th·ªã th√¥ng tin backup
        $fileInfo = Get-Item $backupFile
        Write-Host "üìÅ K√≠ch th∆∞·ªõc: $($fileInfo.Length) bytes" -ForegroundColor Gray
        Write-Host "üïí Th·ªùi gian: $($fileInfo.LastWriteTime)" -ForegroundColor Gray
    }
    catch {
        Write-Host "‚ùå L·ªói khi t·∫°o backup: $($_.Exception.Message)" -ForegroundColor Red
    }
}

function Test-Teams {
    if (!(Test-Path $ConfigPath)) {
        Write-Host "‚ùå Kh√¥ng t√¨m th·∫•y file $ConfigPath" -ForegroundColor Red
        return $false
    }
    
    try {
        $content = Get-Content $ConfigPath -Raw
        $json = $content | ConvertFrom-Json
        
        Write-Host "‚úÖ JSON syntax h·ª£p l·ªá" -ForegroundColor Green
        
        # Ki·ªÉm tra c·∫•u tr√∫c
        if ($json.teams) {
            Write-Host "üè¢ T√¨m th·∫•y $($json.teams.Count) teams" -ForegroundColor Cyan
            
            # Ki·ªÉm tra Team 14 (Management)
            $managementTeam = $json.teams | Where-Object { $_.team_code -eq "T14" }
            if ($managementTeam) {
                Write-Host "üîê Team 14 (Management) t·ªìn t·∫°i" -ForegroundColor Green
            } else {
                Write-Host "‚ö†Ô∏è  C·∫£nh b√°o: Kh√¥ng t√¨m th·∫•y Team 14 (Management)" -ForegroundColor Yellow
            }
            
            # Ki·ªÉm tra duplicate IDs
            $duplicateIds = $json.teams | Group-Object id | Where-Object { $_.Count -gt 1 }
            if ($duplicateIds) {
                Write-Host "‚ùå Ph√°t hi·ªán ID tr√πng l·∫∑p: $($duplicateIds.Name -join ', ')" -ForegroundColor Red
                return $false
            }
            
            # Ki·ªÉm tra required fields
            $invalidTeams = $json.teams | Where-Object { 
                !$_.id -or !$_.team_code -or !$_.team_name -or !$_.layer
            }
            if ($invalidTeams) {
                Write-Host "‚ùå Ph√°t hi·ªán teams thi·∫øu th√¥ng tin b·∫Øt bu·ªôc" -ForegroundColor Red
                return $false
            }
            
            # Ki·ªÉm tra layers
            if ($json.layers) {
                Write-Host "üìä T√¨m th·∫•y $($json.layers.Count) layers" -ForegroundColor Cyan
                
                # Ki·ªÉm tra teams c√≥ layer h·ª£p l·ªá
                $validLayers = $json.layers | ForEach-Object { $_.layer_code }
                $invalidLayerTeams = $json.teams | Where-Object { $_.layer -notin $validLayers }
                if ($invalidLayerTeams) {
                    Write-Host "‚ö†Ô∏è  C·∫£nh b√°o: C√≥ teams v·ªõi layer kh√¥ng h·ª£p l·ªá" -ForegroundColor Yellow
                }
            }
            
            Write-Host "‚úÖ C·∫•u tr√∫c teams h·ª£p l·ªá" -ForegroundColor Green
        } else {
            Write-Host "‚ùå Kh√¥ng t√¨m th·∫•y m·∫£ng 'teams'" -ForegroundColor Red
            return $false
        }
        
        return $true
    }
    catch {
        Write-Host "‚ùå JSON syntax kh√¥ng h·ª£p l·ªá: $($_.Exception.Message)" -ForegroundColor Red
        return $false
    }
}

function Restore-Teams {
    param([string]$BackupFileName)
    
    if (!$BackupFileName) {
        # Hi·ªÉn th·ªã danh s√°ch backup files
        $backupFiles = Get-ChildItem "$BackupDir\teams_backup_*.json" | Sort-Object LastWriteTime -Descending
        
        if ($backupFiles.Count -eq 0) {
            Write-Host "‚ùå Kh√¥ng t√¨m th·∫•y file backup n√†o" -ForegroundColor Red
            return
        }
        
        Write-Host "üìÅ Danh s√°ch backup files:" -ForegroundColor Cyan
        for ($i = 0; $i -lt $backupFiles.Count; $i++) {
            $file = $backupFiles[$i]
            Write-Host "  [$($i+1)] $($file.Name) - $($file.LastWriteTime)" -ForegroundColor Gray
        }
        
        $choice = Read-Host "Ch·ªçn file ƒë·ªÉ restore (1-$($backupFiles.Count)) ho·∫∑c nh·∫≠p t√™n file"
        
        if ($choice -match '^\d+$' -and [int]$choice -le $backupFiles.Count -and [int]$choice -gt 0) {
            $BackupFileName = $backupFiles[[int]$choice - 1].Name
        } else {
            $BackupFileName = $choice
        }
    }
    
    $backupPath = "$BackupDir\$BackupFileName"
    
    if (!(Test-Path $backupPath)) {
        Write-Host "‚ùå Kh√¥ng t√¨m th·∫•y file backup: $backupPath" -ForegroundColor Red
        return
    }
    
    # Validate backup file tr∆∞·ªõc khi restore
    Write-Host "üîç Ki·ªÉm tra file backup..." -ForegroundColor Yellow
    try {
        $backupContent = Get-Content $backupPath -Raw
        $backupJson = $backupContent | ConvertFrom-Json
        
        if (!$backupJson.teams) {
            Write-Host "‚ùå File backup kh√¥ng h·ª£p l·ªá" -ForegroundColor Red
            return
        }
        
        Write-Host "‚úÖ File backup h·ª£p l·ªá ($($backupJson.teams.Count) teams)" -ForegroundColor Green
    }
    catch {
        Write-Host "‚ùå File backup b·ªã l·ªói: $($_.Exception.Message)" -ForegroundColor Red
        return
    }
    
    # T·∫°o backup c·ªßa file hi·ªán t·∫°i tr∆∞·ªõc khi restore
    if (Test-Path $ConfigPath) {
        Write-Host "üíæ T·∫°o backup file hi·ªán t·∫°i..." -ForegroundColor Yellow
        Backup-Teams
    }
    
    # Restore
    try {
        Copy-Item $backupPath $ConfigPath -Force
        Write-Host "‚úÖ Restore th√†nh c√¥ng t·ª´: $BackupFileName" -ForegroundColor Green
        Write-Host "üîÑ H√£y restart API server ƒë·ªÉ √°p d·ª•ng thay ƒë·ªïi" -ForegroundColor Yellow
    }
    catch {
        Write-Host "‚ùå L·ªói khi restore: $($_.Exception.Message)" -ForegroundColor Red
    }
}

function Get-Teams {
    if (!(Test-Path $ConfigPath)) {
        Write-Host "‚ùå Kh√¥ng t√¨m th·∫•y file $ConfigPath" -ForegroundColor Red
        return
    }
    
    try {
        $content = Get-Content $ConfigPath -Raw
        $json = $content | ConvertFrom-Json
        
        Write-Host "üè¢ Danh s√°ch Teams trong h·ªá th·ªëng:" -ForegroundColor Cyan
        Write-Host ""
        
        # Group by layer
        $teamsByLayer = $json.teams | Group-Object layer | Sort-Object Name
        
        foreach ($layerGroup in $teamsByLayer) {
            $layerInfo = $json.layers | Where-Object { $_.layer_code -eq $layerGroup.Name }
            $layerName = if ($layerInfo) { $layerInfo.layer_name } else { $layerGroup.Name }
            
            Write-Host "üìä $($layerGroup.Name) - $layerName" -ForegroundColor Yellow
            Write-Host "=" * 50 -ForegroundColor Gray
            
            $layerGroup.Group | Sort-Object id | ForEach-Object {
                $status = if ($_.is_active) { "üü¢ Active" } else { "üî¥ Inactive" }
                $manager = if ($_.manager_id) { "Manager ID: $($_.manager_id)" } else { "No Manager" }
                
                Write-Host "ID: $($_.id) | Code: $($_.team_code) | Name: $($_.team_name)" -ForegroundColor White
                Write-Host "   Status: $status | $manager" -ForegroundColor Gray
                Write-Host "   Description: $($_.description)" -ForegroundColor Gray
                Write-Host ""
            }
        }
        
        Write-Host "üìä T·ªïng c·ªông: $($json.teams.Count) teams" -ForegroundColor Cyan
        Write-Host "üü¢ Active: $(($json.teams | Where-Object { $_.is_active }).Count)" -ForegroundColor Green
        Write-Host "üî¥ Inactive: $(($json.teams | Where-Object { !$_.is_active }).Count)" -ForegroundColor Red
        
        if ($json.layers) {
            Write-Host "üìã Layers: $($json.layers.Count)" -ForegroundColor Cyan
        }
    }
    catch {
        Write-Host "‚ùå L·ªói khi ƒë·ªçc file: $($_.Exception.Message)" -ForegroundColor Red
    }
}

# Main execution
switch ($Action) {
    "backup" { Backup-Teams }
    "validate" { Test-Teams }
    "restore" { Restore-Teams -BackupFileName $BackupFile }
    "list" { Get-Teams }
    "help" { Show-Help }
}
